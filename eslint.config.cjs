const { FlatCompat } = require("@eslint/eslintrc");
const js = require("@eslint/js");
const reactPlugin = require("eslint-plugin-react");
const reactHooksPlugin = require("eslint-plugin-react-hooks");
const nextPlugin = require("@next/eslint-plugin-next");
const { configs: nextConfigs } = require("@next/eslint-plugin-next");
const tsPlugin = require("@typescript-eslint/eslint-plugin");
const globals = require("globals");
const combinedRules = {
  ...js.configs.recommended.rules,
  ...reactPlugin.configs.recommended.rules,
  ...reactHooksPlugin.configs.recommended.rules,
  ...nextPlugin.configs.recommended.rules,
  ...nextPlugin.configs["core-web-vitals"].rules,
  ...tsPlugin.configs.recommended.rules,
};
const warnsOnly = Object.fromEntries(
  Object.entries(combinedRules).map(([name, setting]) => [
    name,
    downgrade(setting),
  ])
);
module.exports = [
  {
    ignores: [
      "src/_inc/**",
      "__tests__/**",
      "src/**/__tests__/**",
      "**/*.test.ts",
      "**/*.test.tsx",
      "**/types.ts",
      "**/types.tsx",
      "srcBack/**",
      "**/*.d.ts",
    ],
  },
  ...new FlatCompat({
    baseDirectory: __dirname,
    resolvePluginsRelativeTo: __dirname,
    recommendedConfig: js.configs.recommended,
    allConfig: js.configs.all,
  }).extends(
    "eslint:recommended",
    "plugin:@typescript-eslint/recommended",
    "plugin:react-hooks/recommended"
  ),
  nextConfigs["core-web-vitals"],
  {
    plugins: {
      react: reactPlugin,
      "react-hooks": reactHooksPlugin,
      "@next/next": nextPlugin,
      "@typescript-eslint": tsPlugin,
    },
    languageOptions: {
      parser: "@typescript-eslint/parser",
      parserOptions: {
        ecmaVersion: 2022,
        sourceType: "module",
        project: "./tsconfig.json",
        ecmaFeatures: {
          jsx: true,
          globalReturn: false,
          impliedStrict: true,
        },
      },
      globals: {
        ...globals.node,
        ...globals.browser,
        ...globals.es2015,
        ...globals.es2022,
      },
    },
    rules: {
      ...warnsOnly,
      // "prefer-const": "warn",
      // "no-useless-escape": "warn",
      // "accessor-pairs": "warn",
      // "array-callback-return": "warn",
      // "block-scoped-var": "warn",
      // "class-methods-use-this": "warn",
      // complexity: "warn",
      // "consistent-return": "warn",
      // "default-case": "warn",
      // "default-case-last": "warn",
      // "default-param-last": "warn",
      // "dot-location": "warn",
      // "dot-notation": "warn",
      // eqeqeq: "warn",
      // "guard-for-in": "warn",
      // "max-classes-per-file": "warn",
      // "no-alert": "warn",
      // "no-caller": "warn",
      // "no-case-declarations": "warn",
      // "no-cond-assign": "warn",
      // "no-const-assign": "warn",
      // "no-constant-condition": "warn",
      // "no-control-regex": "warn",
      // "no-debugger": "warn",
      // "no-dupe-args": "warn",
      // "no-dupe-class-members": "warn",
      // "no-dupe-keys": "warn",
      // "no-duplicate-case": "warn",
      // "no-empty": "warn",
      // "no-empty-character-class": "warn",
      // "no-ex-assign": "warn",
      // "no-extra-boolean-cast": "warn",
      // "no-func-assign": "warn",
      // "no-import-assign": "warn",
      // "no-inner-declarations": "warn",
      // "no-invalid-regexp": "warn",
      // "no-irregular-whitespace": "warn",
      // "no-loss-of-precision": "warn",
      // "no-misleading-character-class": "warn",
      // "no-new-symbol": "warn",
      // "no-obj-calls": "warn",
      // "no-prototype-builtins": "warn",
      // "no-regex-spaces": "warn",
      // "no-setter-return": "warn",
      // "no-sparse-arrays": "warn",
      // "no-template-curly-in-string": "warn",
      // "no-unexpected-multiline": "warn",
      // "no-unreachable": "warn",
      // "no-unsafe-finally": "warn",
      // "no-unsafe-negation": "warn",
      // "require-atomic-updates": "warn",
      // "use-isnan": "warn",
      // "valid-typeof": "warn",

      // "react/display-name": "warn",
      // "react/forbid-prop-types": "warn",
      // "react/no-access-state-in-setstate": "warn",
      // "react/no-array-index-key": "warn",
      // "react/no-children-prop": "warn",
      // "react/no-danger": "warn",
      // "react/no-danger-with-children": "warn",
      // "react/no-deprecated": "warn",
      // "react/no-direct-mutation-state": "warn",
      // "react/no-find-dom-node": "warn",
      // "react/no-is-mounted": "warn",
      // "react/no-multi-comp": "warn",
      // "react/no-redundant-should-component-update": "warn",
      // "react/no-render-return-value": "warn",
      // "react/no-string-refs": "warn",
      // "react/no-unescaped-entities": "warn",
      // "react/no-unknown-property": "warn",
      // "react/no-unsafe": "warn",
      // "react/no-unsafe-debug-lifecycle-methods": "warn",
      // "react/no-unsafe-factories": "warn",
      // "react/no-unsafe-legacy-component-will-receive-props": "warn",
      // "react/no-unsafe-legacy-component-will-mount": "warn",
      // "react/no-unsafe-legacy-component-will-update": "warn",
      // "react/prefer-es6-class": "warn",
      // "react/prefer-stateless-function": "warn",
      // "react/prop-types": "warn",
      // "react/react-in-jsx-scope": "warn",
      // "react/require-render-return": "warn",

      // "react-hooks/rules-of-hooks": "warn",
      // "react-hooks/exhaustive-deps": "warn",

      // "@next/next/no-html-link-for-pages": "warn",
      // "@next/next/no-document-import-in-page": "warn",
      // "@next/next/no-head-element": "warn",
      // "@next/next/no-img-element": "warn",
      // "@next/next/next-script-for-ga": "warn",
      // "@next/next/google-font-preconnect": "warn",
      // "@next/next/google-font-preload": "warn",
      // "@next/next/google-font-display": "warn",

      // "@next/next/no-before-interactive-script-outside-document": "warn",
      // "@next/next/no-sync-scripts": "warn",
      // "@next/next/no-css-tags": "warn",
      // "@next/next/no-teleport-html-element": "warn",

      // "@typescript-eslint/ban-ts-comment": "warn",
      // "@typescript-eslint/no-unused-vars": "warn",
      // "@typescript-eslint/no-var-requires": "warn",
      // "@typescript-eslint/adjacent-overload-signatures": "warn",
      // "@typescript-eslint/array-type": "warn",
      // "@typescript-eslint/await-thenable": "warn",
      // "@typescript-eslint/ban-ts-comment": "warn",
      // "@typescript-eslint/ban-types": "warn",
      // "@typescript-eslint/class-literal-property-style": "warn",
      // "@typescript-eslint/consistent-indexed-object-style": "warn",
      // "@typescript-eslint/consistent-type-assertions": "warn",
      // "@typescript-eslint/consistent-type-definitions": "warn",
      // "@typescript-eslint/explicit-function-return-type": "warn",
      // "@typescript-eslint/explicit-member-accessibility": "warn",
      // "@typescript-eslint/member-delimiter-style": "warn",
      // "@typescript-eslint/member-ordering": "warn",
      // "@typescript-eslint/method-signature-style": "warn",
      // "@typescript-eslint/no-array-constructor": "warn",
      // "@typescript-eslint/no-base-to-string": "warn",
      // "@typescript-eslint/no-confusing-non-null-assertion": "warn",
      // "@typescript-eslint/no-dynamic-delete": "warn",
      // "@typescript-eslint/no-duplicate-enum-values": "warn",
      // "@typescript-eslint/no-empty-interface": "warn",
      // "@typescript-eslint/no-explicit-any": "warn",
      // "@typescript-eslint/no-floating-promises": "warn",
      // "@typescript-eslint/no-for-in-array": "warn",
      // "@typescript-eslint/no-implied-eval": "warn",
      // "@typescript-eslint/no-inferrable-types": "warn",
      // "@typescript-eslint/no-misused-new": "warn",
      // "@typescript-eslint/no-misused-promises": "warn",
      // "@typescript-eslint/no-namespace": "warn",
      // "@typescript-eslint/no-non-null-asserted-optional-chain": "warn",
      // "@typescript-eslint/no-non-null-assertion": "warn",
      // "@typescript-eslint/no-parameter-properties": "warn",
      // "@typescript-eslint/no-require-imports": "warn",
      // "@typescript-eslint/no-this-alias": "warn",
      // "@typescript-eslint/no-throw-literal": "warn",
      // "@typescript-eslint/no-unnecessary-boolean-literal-compare": "warn",
      // "@typescript-eslint/no-unnecessary-condition": "warn",
      // "@typescript-eslint/no-unnecessary-qualifier": "warn",
      // "@typescript-eslint/no-unnecessary-type-arguments": "warn",
      // "@typescript-eslint/no-unnecessary-type-assertion": "warn",
      // "@typescript-eslint/no-unsafe-argument": "warn",
      // "@typescript-eslint/no-unsafe-assignment": "warn",
      // "@typescript-eslint/no-unsafe-call": "warn",
      // "@typescript-eslint/no-unsafe-member-access": "warn",
      // "@typescript-eslint/no-unsafe-return": "warn",
      // "@typescript-eslint/prefer-as-const": "warn",
      // "@typescript-eslint/prefer-enum-initializers": "warn",
      // "@typescript-eslint/prefer-for-of": "warn",
      // "@typescript-eslint/prefer-function-type": "warn",
      // "@typescript-eslint/prefer-includes": "warn",
      // "@typescript-eslint/prefer-literal-enum-member": "warn",
      // "@typescript-eslint/prefer-optional-chain": "warn",
      // "@typescript-eslint/prefer-readonly": "warn",
      // "@typescript-eslint/prefer-readonly-parameter-types": "warn",
      // "@typescript-eslint/prefer-reduce-type-parameter": "warn",
      // "@typescript-eslint/prefer-regexp-exec": "warn",
      // "@typescript-eslint/prefer-string-starts-ends-with": "warn",
      // "@typescript-eslint/prefer-ts-expect-warn": "warn",
      // "@typescript-eslint/promise-function-async": "warn",
      // "@typescript-eslint/require-array-sort-compare": "warn",
      // "@typescript-eslint/restrict-plus-operands": "warn",
      // "@typescript-eslint/restrict-template-expressions": "warn",
      // "@typescript-eslint/strict-boolean-expressions": "warn",
      // "@typescript-eslint/switch-exhaustiveness-check": "warn",
      // "@typescript-eslint/unbound-method": "warn",
      // "@typescript-eslint/unified-signatures": "warn",

      "no-ternary": "off",
      "no-case-declarations": "off",
      "no-inline-comments": "off",
      "no-console": "off",
      "no-prototype-builtins": "off",
      "require-jsdoc": "off",
      "valid-jsdoc": "off",
      "prefer-template": "off",
      "spaced-comment": "off",
      "no-unused-vars": "off",
      "comma-dangle": "off",
      "space-in-parens": "off",
      "rest-spread-spacing": "off",
      "object-curly-spacing": "off",
      "array-bracket-newline": "off",
      "space-before-function-paren": "off",
      "no-restricted-globals": "off",
      "react/display-name": "off",
      "@next/next/no-img-element": "off",
      "@typescript-eslint/no-explicit-any": "off",
      "@typescript-eslint/no-var-requires": "off",
      "@typescript-eslint/ban-ts-comment": "off",
      "@typescript-eslint/no-unused-vars": "off",
      "@typescript-eslint/comma-dangle": "off",
      "@typescript-eslint/space-in-parens": "off",
      "@typescript-eslint/object-curly-spacing": "off",
      "@typescript-eslint/space-before-function-paren": "off",
      "@typescript-eslint/no-invalid-void-type": "off",
      "@typescript-eslint/no-empty-interface": "off",
      "@typescript-eslint/no-non-null-assertion": "off",
      "@typescript-eslint/no-namespace": "off",
      "@typescript-eslint/no-empty-function": "off",
      "@typescript-eslint/prefer-optional-chain": "off",
      "@typescript-eslint/restrict-template-expressions": "off",
      "@typescript-eslint/ban-types": "off",
      "@typescript-eslint/consistent-type-imports": "off",
      "@typescript-eslint/consistent-type-definitions": "off",
      "@typescript-eslint/consistent-type-assertions": "off",
      "@typescript-eslint/no-misused-promises": "off",
      "@typescript-eslint/no-floating-promises": "off",
    },
  },
];
